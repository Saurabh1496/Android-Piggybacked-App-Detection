<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>#1.2134426644956702
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>#0.9937836443167413
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>#0.7614728871977898
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>#0.7542071544375853
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>#0.6239886948476775
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>#0.5967419667471994
<android.app.ActivityManager: java.util.List getRunningTasks(int)>#0.5855355771899424
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>#0.5351258984006806
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>#0.5113658645404738
<java.net.URLConnection: void connect()>#0.48524117842191594
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>#0.46907621533308075
<android.os.PowerManager$WakeLock: void acquire()>#0.46403149307061564
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>#0.45994473464872104
<android.os.PowerManager$WakeLock: void release()>#0.44561493591531326
<java.net.URLConnection: java.io.InputStream getInputStream()>#0.444121664618662
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>#0.4261542396569386
<android.net.wifi.WifiManager: boolean isWifiEnabled()>#0.415126931584988
<java.net.URL: java.io.InputStream openStream()>#0.4057249380233962
<android.location.LocationManager: java.util.List getProviders(boolean)>#0.4047012392297794
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>#0.40334258627305064
<android.net.wifi.WifiManager: java.util.List getScanResults()>#0.38315379401827665
<android.os.Vibrator: void vibrate(long)>#0.3809956259095855
<android.media.MediaPlayer: void stop()>#0.3772066246815549
<java.net.URL: java.lang.Object getContent()>#0.3708509308226467
<android.widget.VideoView: void setVideoPath(java.lang.String)>#0.36761269112877737
<android.widget.VideoView: void pause()>#0.3660723038135955
<android.widget.VideoView: void stopPlayback()>#0.3565688515590201
<android.os.PowerManager$WakeLock: void acquire(long)>#0.35050610585769915
<android.widget.VideoView: void start()>#0.3491236808708888
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>#0.3484533294539946
<android.hardware.Camera: android.hardware.Camera open()>#0.34701690544520136
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>#0.3431488185492335
<android.net.wifi.WifiManager: boolean startScan()>#0.3427662680143357
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>#0.3399171718662945
<android.os.Vibrator: void cancel()>#0.3335768318927503
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>#0.31901975209589006
<android.media.MediaPlayer: void release()>#0.30651499937051746
<android.media.MediaPlayer: void reset()>#0.3051839476025539
<android.media.MediaPlayer: void pause()>#0.30291996916218433
<java.net.HttpURLConnection: void connect()>#0.2943675429396693
<android.widget.VideoView: void setVideoURI(android.net.Uri)>#0.27725323685090353
<android.media.MediaPlayer: void start()>#0.26750985439052827
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>#0.25116010550188067
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>#0.2492071618166582
<android.webkit.WebView: void <init>(android.content.Context)>#0.24849995913328943
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>#0.2387527106075692
<java.net.ServerSocket: void <init>(int)>#0.22074412996664272
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>#0.22031588201919355
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>#0.2176573514275398
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>#0.19703008002762723
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>#0.1945653853453418
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>#0.19328998587341933
<android.net.wifi.WifiManager$WifiLock: void acquire()>#0.18286218207593066
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>#0.17724882960505225
<android.net.wifi.WifiManager$WifiLock: void release()>#0.17331125475220602
<java.net.URL: java.net.URLConnection openConnection()>#0.1698097921735844
<android.media.MediaRecorder: void setAudioSource(int)>#0.16443629953470656
<android.net.wifi.WifiManager: int getWifiState()>#0.14961944617051376
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>#0.14180365708194115
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>#0.14122102251961066
<java.net.ServerSocket: void bind(java.net.SocketAddress)>#0.14100216449228387
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>#0.13814409103028005
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>#0.12931207029172417
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>#0.10466628108363145
<android.app.ActivityManager: void restartPackage(java.lang.String)>#0.10342403954483038
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>#0.09212990521744101
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>#0.09061472129271558
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>#0.08954164564245681
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>#0.08754090432432993
<android.bluetooth.BluetoothDevice: java.lang.String getName()>#0.07688521806654655
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>#0.0763362071801654
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>#0.07624530376635187
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>#0.07278683066758307
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>#0.0720268375529617
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>#0.06405241098747311
<java.net.DatagramSocket: void <init>(int)>#0.0640067663122104
<android.media.Ringtone: void play()>#0.06153274077200599
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>#0.06022606371085443
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>#0.05886448971364979
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>#0.05390175442018453
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>#0.05259612471771167
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>#0.05225713604226906
<android.media.AudioManager: void stopBluetoothSco()>#0.04818085096868355
<android.media.AudioManager: void startBluetoothSco()>#0.04818085096868355
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>#0.04756037154722164
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>#0.04756037154722164
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>#0.04726650083525801
<android.bluetooth.BluetoothSocket: void connect()>#0.04503506532211591
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>#0.04503506532211591
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>#0.043989558785433994
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>#0.042458923034343614
<android.media.AudioManager: void setBluetoothScoOn(boolean)>#0.04181827494196477
<android.bluetooth.BluetoothAdapter: boolean enable()>#0.04125995537584655
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>#0.03982806322159084
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>#0.039192852031701794
<android.bluetooth.BluetoothAdapter: boolean disable()>#0.037821625761192676
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>#0.037821625761192676
<android.bluetooth.BluetoothDevice: int getBondState()>#0.037137964941988434
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>#0.03506408314514111
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>#0.03506408314514111
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>#0.033850585184518854
<android.net.wifi.WifiManager$MulticastLock: void acquire()>#0.03319005268465903
<android.net.wifi.WifiManager$MulticastLock: void release()>#0.03319005268465903
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>#0.031557674830627
<android.net.wifi.WifiManager: boolean disconnect()>#0.03056472222322846
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>#0.02865332660558618
<android.widget.VideoView: void resume()>#0.02865332660558618
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>#0.02865332660558618
<android.widget.VideoView: void suspend()>#0.02805126651611289
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>#0.02619833333419582
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>#0.025660575958169826
<android.bluetooth.BluetoothAdapter: int getState()>#0.025660575958169826
<android.bluetooth.BluetoothAdapter: int getScanMode()>#0.025660575958169826
<android.media.AudioManager: void setMode(int)>#0.025071660779887907
<android.media.MediaRecorder: void setVideoSource(int)>#0.023227702560367484
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>#0.023227702560367484
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>#0.023227702560367484
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>#0.023227702560367484
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>#0.023227702560367484
<android.net.wifi.WifiManager: boolean removeNetwork(int)>#0.023227702560367484
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])>#0.022567056789679237
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>#0.022567056789679237
<android.media.AudioManager: boolean isWiredHeadsetOn()>#0.022567056789679237
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>#0.019356418800306235
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>#0.019356418800306235
<java.net.MulticastSocket: void <init>(int)>#0.019356418800306235
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>#0.019356418800306235
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>#0.019356418800306235
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>#0.019356418800306235
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])>#0.019356418800306235
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>#0.019356418800306235
<android.net.wifi.WifiManager: boolean saveConfiguration()>#0.019356418800306235
<android.media.Ringtone: void stop()>#0.01832898282726416
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>#0.016006053773942003
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>#0.016006053773942003
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>#0.016006053773942003
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>#0.016006053773942003
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>#0.016006053773942003
<android.media.AsyncPlayer: void stop()>#0.015485135040244988
<android.net.wifi.WifiManager: boolean pingSupplicant()>#0.01309916666709791
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>#0.012482705083272667
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>#0.012482705083272667
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>#0.012482705083272667
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>#0.012482705083272667
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>#0.012482705083272667
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>#0.012482705083272667
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>#0.012482705083272667
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>#0.012482705083272667
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>#0.012482705083272667
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>#0.012482705083272667
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>#0.012482705083272667
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>#0.012482705083272667
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>#0.012482705083272667
<android.media.AudioManager: boolean isBluetoothA2dpOn()>#0.012004540330456503
<android.net.wifi.WifiManager: boolean disableNetwork(int)>#0.010302223904734002
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>#0.009312013646791222
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>#0.009312013646791222
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>#0.009312013646791222
<android.net.wifi.WifiManager: boolean reassociate()>#0.008732777778065274
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>#0.008732777778065274
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>#0.008732777778065274
<android.media.AudioManager: void setParameters(java.lang.String)>#0.008732777778065274
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>#0.008732777778065274
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>#0.008732777778065274
<android.app.AlarmManager: void setTimeZone(java.lang.String)>#0.008732777778065274
<android.media.RingtoneManager: void stopPreviousRingtone()>#0.008732777778065274
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>#0.008732777778065274
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>#0.008732777778065274
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>#0.008732777778065274
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>#0.008732777778065274
<android.net.ConnectivityManager: void setNetworkPreference(int)>#0.008732777778065274
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>#0.008732777778065274
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>#0.008732777778065274
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>#0.008732777778065274
<android.nfc.tech.Ndef: void connect()>#0.008732777778065274
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>#0.008732777778065274
<android.media.Ringtone: void setStreamType(int)>#0.008321803388848444
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>#0.005151111952367001
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>#0.005151111952367001
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>#0.005151111952367001
<android.app.WallpaperManager: void setResource(int)>#0.004656006823395611
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>#0.004656006823395611
<android.nfc.tech.Ndef: void close()>#0.004656006823395611
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>#0.004656006823395611
<android.net.wifi.WifiManager: boolean reconnect()>#0.004656006823395611
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>#0.004656006823395611
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>#0.004656006823395611
<android.app.WallpaperManager: void setStream(java.io.InputStream)>#0.004656006823395611
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>#0.004656006823395611
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>#0.004656006823395611
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>#0.004656006823395611
<android.content.ContentResolver: java.util.List getCurrentSyncs()>#0.004656006823395611
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>#0.004656006823395611
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>#0.004656006823395611
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>#0.004656006823395611
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>#0.004656006823395611
<android.media.AudioManager: void setMicrophoneMute(boolean)>#0.004656006823395611
<android.nfc.tech.NdefFormatable: void connect()>#0.004656006823395611
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>#0.004656006823395611
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>#0.004656006823395611
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>#0.004656006823395611
<android.net.ConnectivityManager: int getNetworkPreference()>#0.004656006823395611
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>#0.004656006823395611
<android.nfc.tech.MifareClassic: void restore(int)>#0.0
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>#0.0
<android.nfc.tech.MifareClassic: void reconnect()>#0.0
<android.nfc.tech.MifareUltralight: void reconnect()>#0.0
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>#0.0
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>#0.0
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>#0.0
<android.media.effect.EffectContext: void release()>#0.0
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>#0.0
<android.content.Context: void clearWallpaper()>#0.0
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.location.LocationManager: void removeTestProvider(java.lang.String)>#0.0
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>#0.0
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)>#0.0
<android.content.Context: void setWallpaper(java.io.InputStream)>#0.0
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>#0.0
<android.nfc.tech.BasicTagTechnology: void close()>#0.0
<android.nfc.tech.MifareClassic: void close()>#0.0
<android.speech.SpeechRecognizer: void stopListening()>#0.0
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>#0.0
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>#0.0
<android.nfc.tech.NdefFormatable: void close()>#0.0
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()>#0.0
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>#0.0
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>#0.0
<android.nfc.tech.NfcA: byte[] transceive(byte[],boolean)>#0.0
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()>#0.0
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>#0.0
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)>#0.0
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>#0.0
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>#0.0
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.nfc.tech.NfcF: byte[] transceive(byte[])>#0.0
<android.media.Ringtone: void setUri(android.net.Uri)>#0.0
<android.nfc.tech.MifareUltralight: void setTimeout(int)>#0.0
<android.app.NotificationManager: void notify(int,android.app.Notification)>#0.0
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>#0.0
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>#0.0
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>#0.0
<android.nfc.tech.NfcB: void close()>#0.0
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>#0.0
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage,boolean)>#0.0
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>#0.0
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>#0.0
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>#0.0
<android.net.wifi.WifiManager$WifiLock: void finalize()>#0.0
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>#0.0
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>#0.0
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.os.PowerManager$WakeLock: void release(int)>#0.0
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)>#0.0
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>#0.0
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>#0.0
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>#0.0
<android.nfc.tech.NfcV: byte[] transceive(byte[])>#0.0
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>#0.0
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>#0.0
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>#0.0
<android.nfc.tech.MifareUltralight: int getTimeout()>#0.0
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>#0.0
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>#0.0
<java.net.Socket: void <init>(int)>#0.0
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>#0.0
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>#0.0
<android.nfc.tech.MifareClassic: void decrement(int,int)>#0.0
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])>#0.0
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>#0.0
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)>#0.0
<android.nfc.tech.NfcF: int getTimeout()>#0.0
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>#0.0
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>#0.0
<java.net.NetworkInterface: void <init>(int)>#0.0
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>#0.0
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>#0.0
<android.nfc.tech.NfcV: void connect()>#0.0
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>#0.0
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>#0.0
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)>#0.0
<android.nfc.tech.NfcF: void reconnect()>#0.0
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>#0.0
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>#0.0
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>#0.0
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>#0.0
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>#0.0
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>#0.0
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>#0.0
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>#0.0
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>#0.0
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>#0.0
<android.net.wifi.WifiManager$MulticastLock: void finalize()>#0.0
<android.app.WallpaperManager: void clear()>#0.0
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>#0.0
<android.app.ActivityManager: void moveTaskToFront(int,int)>#0.0
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>#0.0
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>#0.0
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)>#0.0
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>#0.0
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>#0.0
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>#0.0
<android.nfc.tech.NfcA: byte[] transceive(byte[])>#0.0
<java.net.HttpURLConnection: void <init>(int)>#0.0
<android.nfc.tech.NfcF: void setTimeout(int)>#0.0
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>#0.0
<android.net.sip.SipAudioCall: void close()>#0.0
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>#0.0
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>#0.0
<android.content.ContextWrapper: void clearWallpaper()>#0.0
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>#0.0
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>#0.0
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>#0.0
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.WifiManager$ChannelListener)>#0.0
<android.nfc.tech.IsoDep: void reconnect()>#0.0
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>#0.0
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()>#0.0
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)>#0.0
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>#0.0
<android.nfc.tech.NfcF: void close()>#0.0
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>#0.0
<android.nfc.tech.NfcA: void close()>#0.0
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>#0.0
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>#0.0
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>#0.0
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>#0.0
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>#0.0
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>#0.0
<android.nfc.tech.MifareUltralight: void connect()>#0.0
<android.nfc.tech.MifareClassic: void connect()>#0.0
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>#0.0
<android.nfc.tech.NfcA: void reconnect()>#0.0
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>#0.0
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)>#0.0
<android.nfc.tech.NfcV: void reconnect()>#0.0
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>#0.0
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>#0.0
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>#0.0
<android.nfc.tech.MifareClassic: void transfer(int)>#0.0
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>#0.0
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>#0.0
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>#0.0
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>#0.0
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)>#0.0
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>#0.0
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>#0.0
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>#0.0
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>#0.0
<android.nfc.tech.NfcB: byte[] transceive(byte[])>#0.0
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)>#0.0
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>#0.0
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>#0.0
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>#0.0
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>#0.0
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>#0.0
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>#0.0
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>#0.0
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>#0.0
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>#0.0
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>#0.0
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>#0.0
<android.nfc.tech.NfcA: void setTimeout(int)>#0.0
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>#0.0
<android.net.nsd.NsdManager: void init()>#0.0
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>#0.0
<android.net.nsd.NsdManager: void setEnabled(boolean)>#0.0
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>#0.0
<android.bluetooth.BluetoothA2dp: boolean isEnabled()>#0.0
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>#0.0
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>#0.0
<android.bluetooth.BluetoothHeadset: boolean isEnabled()>#0.0
<android.nfc.tech.IsoDep: void connect()>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.net.sip.SipAudioCall: void startAudio()>#0.0
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>#0.0
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>#0.0
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>#0.0
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>#0.0
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>#0.0
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>#0.0
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)>#0.0
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>#0.0
<android.widget.QuickContactBadge: void onClick(android.view.View)>#0.0
<android.os.PowerManager$WakeLock: void finalize()>#0.0
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>#0.0
<android.nfc.tech.MifareClassic: int getTimeout()>#0.0
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>#0.0
<android.nfc.tech.IsoDep: int getTimeout()>#0.0
<android.nfc.tech.MifareClassic: void increment(int,int)>#0.0
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>#0.0
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>#0.0
<android.nfc.tech.NdefFormatable: void reconnect()>#0.0
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>#0.0
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>#0.0
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>#0.0
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)>#0.0
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>#0.0
<android.speech.SpeechRecognizer: void cancel()>#0.0
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()>#0.0
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>#0.0
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>#0.0
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>#0.0
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)>#0.0
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>#0.0
<android.nfc.tech.NfcA: void connect()>#0.0
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>#0.0
<android.nfc.tech.MifareUltralight: void close()>#0.0
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>#0.0
<android.os.Vibrator: void vibrate(long[],int)>#0.0
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>#0.0
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>#0.0
<android.nfc.tech.BasicTagTechnology: void connect()>#0.0
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>#0.0
<android.nfc.tech.NfcB: void reconnect()>#0.0
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>#0.0
<android.nfc.tech.BasicTagTechnology: void reconnect()>#0.0
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>#0.0
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>#0.0
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>#0.0
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>#0.0
<android.net.sip.SipManager: void close(java.lang.String)>#0.0
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>#0.0
<android.bluetooth.BluetoothHealth: boolean isEnabled()>#0.0
<android.nfc.tech.NfcV: void close()>#0.0
<android.nfc.tech.MifareClassic: void setTimeout(int)>#0.0
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>#0.0
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>#0.0
<android.media.AudioRecord: void <init>(int,int,int,int,int)>#0.0
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>#0.0
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>#0.0
<android.nfc.tech.NfcA: int getTimeout()>#0.0
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)>#0.0
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>#0.0
<android.nfc.tech.IsoDep: void close()>#0.0
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>#0.0
<android.net.sip.SipAudioCall: void endCall()>#0.0
<android.widget.VideoView: void release(boolean)>#0.0
<android.nfc.tech.MifareClassic: boolean authenticate(int,byte[],boolean)>#0.0
<android.nfc.tech.NfcF: void connect()>#0.0
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>#0.0
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>#0.0
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>#0.0
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>#0.0
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>#0.0
<android.nfc.tech.Ndef: void reconnect()>#0.0
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)>#0.0
<android.nfc.tech.IsoDep: void setTimeout(int)>#0.0
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>#0.0
<android.nfc.tech.Ndef: boolean makeReadOnly()>#0.0
<android.nfc.tech.NfcB: void connect()>#0.0
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>#0.0
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>#0.0
<android.nfc.NfcAdapter: void dispatch(android.nfc.Tag)>#0.0
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>#0.0
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>#0.0
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>#0.0
<android.net.sip.SipAudioCall: void close(boolean)>#0.0
<android.bluetooth.BluetoothAdapter: int getConnectionState()>#0.0
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])>#0.0
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>#0.0
